openapi: 3.0.0
info:
  title: Clinic Reservations API
  description: A simple API for managing patient appointments and doctor schedules.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /patients:
    post:
      summary: Add a new patient
      operationId: addPatient
      tags:
        - Patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        "201":
          description: Patient added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
  /patients/{id}:
    get:
      summary: Get details of a specific patient
      operationId: getPatientId
      tags:
        - Patient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Details of the patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "404":
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /patients/{id}/appointments:
    get:
      summary: Get all history of a patient
      operationId: getPatientHistory
      tags:
        - Patient
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient whose appointment history is to be retrieved
          schema:
            type: integer
      responses:
        "200":
          description: List of all appointments for the patient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Appointment"
        "404":
          description: Patient not found. The patient with the provided ID does not exist
            in the system.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /doctors:
    get:
      summary: Retrieve a list of all doctors
      operationId: getAllDoctors
      tags:
        - Doctor
      responses:
        "200":
          description: A list of all doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Doctor"
  /doctors/{id}:
    get:
      summary: Get details of a specific doctor
      operationId: getDoctorId
      tags:
        - Doctor
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the doctor whose details are to be retrieved
          schema:
            type: integer
      responses:
        "200":
          description: Details of the doctor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "404":
          description: Doctor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /doctors/{id}/available-slots:
    get:
      summary: Get available slots for a specific doctor on a given date
      operationId: getDoctorAvailableSlots
      tags:
        - Doctor
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the doctor whose available slots are to be retrieved
          schema:
            type: integer
        - name: date
          in: query
          required: true
          description: The date for which to retrieve available slots (format YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        "200":
          description: A list of available slots for the doctor on the given date
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    slot_id:
                      type: integer
                      example: 1
                    time:
                      type: string
                      format: date-time
                      example: 2025-03-20T09:00:00Z
                    status:
                      type: string
                      enum:
                        - available
                        - booked
                        - unavailable
                      example: available
        "400":
          description: Bad request due to incorrect date format or missing parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Doctor or available slots not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /appointments:
    post:
      summary: Add a new appointment
      operationId: addAppointment
      tags:
        - Appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      responses:
        "201":
          description: Appointment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Invalid input. Missing or incorrect data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Patient or doctor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /appointments/{id}:
    get:
      summary: Get details of a specific appointment
      operationId: getAppointmentDetails
      tags:
        - Appointment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment to retrieve details for
          schema:
            type: integer
      responses:
        "200":
          description: Details of the appointment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "404":
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Edit details of an existing appointment
      operationId: editAppointment
      tags:
        - Appointment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment to edit
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      responses:
        "200":
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Invalid request (e.g., invalid data format)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Cancel a specific appointment
      operationId: cancelAppointment
      tags:
        - Appointment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the appointment to cancel
          schema:
            type: integer
      responses:
        "200":
          description: Appointment cancelled successfully
        "400":
          description: Invalid request (e.g., the appointment could not be cancelled)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/signup:
    post:
      summary: Register a new user
      description: Allows a new user to register by providing their details.
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input (e.g., missing data, invalid email)
  /auth/login:
    post:
      summary: User login (Generate JWT)
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/profile:
    get:
      summary: Get profile of logged-in user
      operationId: getProfile
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized. Token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/patients:
    get:
      summary: Get a list of all patients
      operationId: getAllPatients
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
        "401":
          description: Unauthorized (invalid or expired token)
  /admin/patients/{id}:
    get:
      summary: Get details of a specific patient
      operationId: getPatientDetails
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient whose details are to be retrieved
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "401":
          description: Unauthorized (invalid or expired token)
        "404":
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific patient
      operationId: deletePatient
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient to be deleted
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Patient deleted successfully
        "401":
          description: Unauthorized (invalid or expired token)
        "404":
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/doctors:
    get:
      summary: Get all doctors
      operationId: getAllDoctorsAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of all doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Doctor"
        "401":
          description: Unauthorized (invalid token)
        "403":
          description: Forbidden (insufficient permissions)
    post:
      summary: Add a new doctor
      operationId: addDoctor
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
      responses:
        "201":
          description: Doctor added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Validation error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (insufficient permissions)
  /admin/doctors/{id}:
    put:
      summary: Edycja danych lekarza
      operationId: editDoctor
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID lekarza do edytowania
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
      responses:
        "200":
          description: Doctor updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "400":
          description: Błąd walidacji danych
        "401":
          description: Brak autoryzacji
        "403":
          description: Brak uprawnień do wykonania tej operacji
        "404":
          description: Lekarz o podanym ID nie został znaleziony
  /admin/appointments:
    get:
      summary: Pobranie wszystkich wizyt
      operationId: getAllAppointments
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista wszystkich wizyt
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Appointment"
        "401":
          description: Brak autoryzacji
        "403":
          description: Brak uprawnień do wykonania tej operacji
  /admin/appointments/{id}:
    delete:
      summary: Cancel an appointment
      operationId: cancelAppointmentAdmin
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the appointment to cancel
          schema:
            type: integer
      responses:
        "200":
          description: Appointment cancelled successfully
        "401":
          description: Unauthorized (invalid token)
        "403":
          description: Forbidden (insufficient permissions)
        "404":
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/appointments/{id}/reschedule:
    put:
      summary: Reschedule an appointment
      operationId: rescheduleAppointment
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the appointment to reschedule
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_date:
                  type: string
                  format: date-time
                  example: 2025-03-25T10:30:00Z
              required:
                - new_date
      responses:
        "200":
          description: Appointment rescheduled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Appointment"
        "400":
          description: Invalid input (e.g., past date or doctor unavailable)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (invalid token)
        "403":
          description: Forbidden (insufficient permissions)
        "404":
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jan
        surname:
          type: string
          example: Kowalski
        date_of_birth:
          type: string
          format: date
          example: 1985-03-25
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        phone:
          type: string
          example: "123456789"
    Doctor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Anna
        surname:
          type: string
          example: Nowak
        specialization:
          type: string
          example: Cardiologist
        email:
          type: string
          format: email
          example: anna.nowak@clinic.com
        phone:
          type: string
          example: "987654321"
    Appointment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        patient_id:
          type: integer
          example: 1
        doctor_id:
          type: integer
          example: 1
        appointment_date:
          type: string
          format: date-time
          example: 2025-03-20T14:00:00Z
        status:
          type: string
          enum:
            - scheduled
            - completed
            - cancelled
          example: scheduled
    Error:
      type: object
      properties:
        message:
          type: string
          example: Patient not found
        code:
          type: integer
          example: 404
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jan
        surname:
          type: string
          example: Kowalski
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        password:
          type: string
          example: SecurePassword123
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        password:
          type: string
          example: SecurePassword123
    Token:
      type: object
      properties:
        access_token:
          type: string
          example: JWT_TOKEN_HERE
        token_type:
          type: string
          example: bearer

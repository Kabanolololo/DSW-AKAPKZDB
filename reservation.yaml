openapi: 3.0.0
info:
  title: Clinic Reservations API
  description: A simple API for managing patient appointments and doctor schedules.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
/patients:
  post:
    summary: Add a new patient
    operationId: addPatient
    tags:
      - Patient
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Patient"
    responses:
      "201":
        description: Patient added successfully

/patients/{id}:
  get:
    summary: Get details of a specific patient
    operationId: getPatientId
    tags:
      - Patient
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    responses:
      "200":
        description: Details of the patient
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      "404":
        description: Patient not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/patients/{id}/appointments:
  get:
    summary: Get all history of a patient
    operationId: getPatientHistory
    tags:
      - Patient
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the patient whose appointment history is to be retrieved
        schema:
          type: integer
    responses:
      "200":
        description: List of all appointments for the patient
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Appointment"
      "404":
        description: Patient not found. The patient with the provided ID does not exist in the system.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/doctors:
  get:
    summary: Retrieve a list of all doctors
    operationId: getAllDoctors
    tags:
      - Doctor
    responses:
      "200":
        description: A list of all doctors
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Doctor"

/doctors/{id}:
  get:
    summary: Get details of a specific doctor
    operationId: getDoctorId
    tags:
      - Doctor
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the doctor whose details are to be retrieved
        schema:
          type: integer
    responses:
      "200":
        description: Details of the doctor
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Doctor"
      "404":
        description: Doctor not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/doctors/{id}/available-slots:
  get:
    summary: Get available slots for a specific doctor on a given date
    operationId: getDoctorAvailableSlots
    tags:
      - Doctor
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the doctor whose available slots are to be retrieved
        schema:
          type: integer
      - name: date
        in: query
        required: true
        description: The date for which to retrieve available slots (format: YYYY-MM-DD)
        schema:
          type: string
          format: date
    responses:
      "200":
        description: A list of available slots for the doctor on the given date
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  slot_id:
                    type: integer
                    example: 1
                  time:
                    type: string
                    format: date-time
                    example: "2025-03-20T09:00:00Z"
                  status:
                    type: string
                    example: "available"
      "404":
        description: Doctor or available slots not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/appointments:
  post:
    summary: Add a new appointment
    operationId: addAppointment
    tags:
      - Appointment
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Appointment"
    responses:
      "201":
        description: Appointment added successfully
      "400":
        description: Invalid input. Missing or incorrect data.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      "404":
        description: Patient or doctor not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/appointments/{id}:
  get:
    summary: Get details of a specific appointment
    operationId: getAppointmentDetails
    tags:
      - Appointment
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the appointment to retrieve details for
        schema:
          type: integer
    responses:
      "200":
        description: Details of the appointment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      "404":
        description: Appointment not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
  put:
    summary: Edit details of an existing appointment
    operationId: editAppointment
    tags:
      - Appointment
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the appointment to edit
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Appointment"
    responses:
      "200":
        description: Appointment updated successfully
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Appointment"
      "400":
        description: Invalid request (e.g., invalid data format)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      "404":
        description: Appointment not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/appointments/{id}:
  delete:
    summary: Cancel a specific appointment
    operationId: cancelAppointment
    tags:
      - Appointment
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the appointment to cancel
        schema:
          type: integer
    responses:
      "200":
        description: Appointment cancelled successfully
      "404":
        description: Appointment not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
      "400":
        description: Invalid request (e.g., the appointment could not be cancelled)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

/auth/signup:
  post:
    summary: Register a new user
    operationId: registerUser
    tags:
      - Auth
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    responses:
      "201":
        description: User created successfully
      "400":
        description: Invalid input (e.g., missing data, invalid email)

/auth/login:
  post:
    summary: User login (Generate JWT)
    operationId: loginUser
    tags:
      - Auth
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Login"
    responses:
      "200":
        description: Login successful, returns JWT token
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      "401":
        description: Invalid credentials

/auth/profile:
  get:
    summary: Get profile of logged-in user
    operationId: getProfile
    tags:
      - Auth
    security:
      - bearerAuth: []
    responses:
      "200":
        description: User profile data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      "401":
        description: Unauthorized (invalid or expired token)

components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jan
        surname:
          type: string
          example: Kowalski
        date_of_birth:
          type: string
          format: date
          example: "1985-03-25"
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        phone:
          type: string
          example: "123456789"
    
    Doctor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Anna
        surname:
          type: string
          example: Nowak
        specialization:
          type: string
          example: "Cardiologist"
        email:
          type: string
          format: email
          example: anna.nowak@clinic.com
        phone:
          type: string
          example: "987654321"
    
    Appointment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        patient_id:
          type: integer
          example: 1
        doctor_id:
          type: integer
          example: 1
        appointment_date:
          type: string
          format: date-time
          example: "2025-03-20T14:00:00Z"
        status:
          type: string
          enum:
            - scheduled
            - completed
            - cancelled
          example: "scheduled"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Patient not found"
        code:
          type: integer
          example: 404

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Jan
        surname:
          type: string
          example: Kowalski
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        password:
          type: string
          example: SecurePassword123

    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          example: jan.kowalski@example.com
        password:
          type: string
          example: SecurePassword123

    Token:
      type: object
      properties:
        access_token:
          type: string
          example: "JWT_TOKEN_HERE"
        token_type:
          type: string
          example: "bearer"

    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT